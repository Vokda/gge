class Game
{
	def Game()
	{
		this.max_frames = 10
		this.control_schema = "ctrl.schema"
		this.frame = 0
		this.quit = false
		print("Game " + gge_api.hello());
		this.prev_hex_i = -1

	}

	var control_schema
	var max_frames
	var frame
	var prev_hex_i
	var quit

	def handle_event(event)
	{
		switch(event)
		{
			case(113){} // q
			case(27){ // esc
				this.quit = true;
				break;
			}
			case(1) // left mouse click
			{
				auto mp = gge_api.get_mouse_position()
				print("click")
				var hex_i = gge_api.get_hex_from_mouse(mp[0], mp[1])
				var v = [mp[0], mp[1], -1, -1]
				gge_api.create_text(
				"Hex " + to_string(hex_i),
				stl_vector_int([255,0,0,255]),
				stl_vector_int(v),
				1000,
				0)
				break
			}

			case(3)
			{
				this.scroll()
				break
			}
		}
	}

	// return true to exit loop, think of the return value as quit
	// needs to be called game_loop
	def game_loop(delta)
	{
		//print("delta " + to_string(delta))
		++this.frame
		var events := gge_api.get_events()
		for (var i = 0; i < events.size(); ++i)
		{
			this.handle_event(events[i])
		}
		
		// highlight hex when hovering mouse over it
		this.highlight_hex()

		return this.quit
	}

	def highlight_hex
	{
		var mouse_pos = gge_api.get_mouse_position()
		var hex_i = gge_api.get_hex_from_mouse(mouse_pos[0], mouse_pos[1])
		if(hex_i == -1)
		{
			//gge_api.set_hex_color([255, 255, 255, 255], this.prev_hex_i)
			//this.prev_hex_i = hex_i
			return;
		}

		gge_api.set_hex_color([255, 0, 0, 255], hex_i)
		// reset old hex and update prev hex
		if(hex_i != this.prev_hex_i )
		{
			gge_api.set_hex_color([255, 255, 255, 255], this.prev_hex_i)
			this.prev_hex_i = hex_i
		}
	}

	def scroll
	{
		var mouse_pos = gge_api.get_mouse_position()
		return gge_api.scroll(mouse_pos)
	}
}
